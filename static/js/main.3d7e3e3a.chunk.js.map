{"version":3,"sources":["components/Form/Form-Checkbox/Form-Checkbox.tsx","components/Form/Form-TextArea/Form-TextArea.tsx","components/Form/Form-Radio/Form-Radio.tsx","components/Form/Form-Text/Form-Text.tsx","components/Form/Form-Number/Form-Number.tsx","components/Form/Form-DropDown/DropDownItem/DropDownItem.tsx","components/Form/Form-DropDown/Form-DropDown.tsx","components/Form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FormCheckbox","props","className","htmlFor","id","value","type","name","FormTextArea","label","component","rows","cols","placeholder","FormRadio","FormText","FormNumber","DropDownItems","disabled","FormDropDown","initialValue","dropDownList","map","data","Form","initialValues","email","age","role","recommend","feature","improved","comments","validationSchema","Yup","shape","required","onSubmit","values","actions","console","log","formikProps","handleSubmit","onReset","handleReset","render","msg","isSubmitting","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d7e3e3a.chunk.js","sourcesContent":["import React from \"react\";\nimport {Field} from \"formik\";\nimport './Form-Checkbox.css';\nimport '../Form.css';\n\ninterface Props {\n    name: string,\n    id: string,\n    value: string,\n}\n\nconst FormCheckbox: React.FC<Props> = (props: Props) => {\n    return (\n        <div className={\"Radio-container\"}>\n            <label className=\"radio-checkbox-option\" htmlFor={props.id}>{props.value}\n                <Field\n                    type=\"checkbox\"\n                    name={props.name}\n                    id={props.id}\n                    value={props.value}\n                    className=\"Field-checkbox\"\n                />\n                <span className=\"checkbox-mark\"></span>\n            </label>\n        </div>\n    );\n};\n\nexport default FormCheckbox;","import React from \"react\";\nimport {Field} from \"formik\";\nimport './Form-TextArea.css';\nimport '../Form.css';\n\ninterface Props {\n    label: string,\n    name: string,\n    id: string,\n    placeholder: string,\n}\n\nconst FormTextArea: React.FC<Props> = (props: Props) => {\n    return (\n        <div>\n            <label className=\"heading\" htmlFor={props.id}>{props.label}</label>\n            <Field\n                component=\"textarea\"\n                name={props.name}\n                rows={6}\n                cols={74}\n                placeholder={props.placeholder}\n                id={props.id}\n                className=\"Textarea\"\n            />\n        </div>\n    );\n};\n\nexport default FormTextArea;","import React from \"react\";\nimport './Form-Radio.css';\nimport '../Form.css';\nimport {Field} from \"formik\";\n\ninterface Props {\n    name: string,\n    id: string,\n    value: string,\n}\n\nconst FormRadio: React.FC<Props> = (props: Props) => {\n    return (\n        <div className={\"Radio-container\"}>\n            <label className=\"radio-checkbox-option\" htmlFor={props.id}>{props.value}\n                <Field\n                    type=\"radio\"\n                    name={props.name}\n                    id={props.id}\n                    value={props.value}\n                    className=\"Field-radio\"\n                />\n                <span className=\"radio-mark\"></span>\n            </label>\n        </div>\n    );\n};\n\nexport default FormRadio;","import React from \"react\";\nimport {Field} from \"formik\";\nimport '../Form.css';\n\ninterface Props {\n    label: string,\n    name: string,\n    placeholder: string,\n    id: string\n}\n\nconst FormText: React.FC<Props> = (props: Props) => {\n    return (\n        <div>\n            <label className=\"heading\" htmlFor=\"name\">{props.label}</label>\n            <Field\n                type=\"text\"\n                name={props.name}\n                placeholder={props.placeholder}\n                id={props.id}\n                className=\"Input-field\"\n            />\n        </div>\n    );\n};\n\nexport default FormText;","import React from \"react\";\nimport {Field} from \"formik\";\nimport '../Form.css';\n\ninterface Props {\n    label: string,\n    name: string,\n    placeholder: string,\n    id: string\n}\n\nconst FormNumber: React.FC<Props> = (props: Props) => {\n    return (\n        <div>\n            <label className=\"heading\" htmlFor=\"name\">{props.label}</label>\n            <Field\n                type=\"number\"\n                name={props.name}\n                placeholder={props.placeholder}\n                id={props.id}\n                className=\"Input-field\"\n            />\n        </div>\n    );\n};\n\nexport default FormNumber;","import React from \"react\";\nimport './DropDownItem.css';\n\ninterface Props {\n    disabled: boolean,\n    value: string,\n}\n\nconst DropDownItems: React.FC<Props> = (props: Props) => {\n    return (\n        <option\n            disabled={props.disabled}\n            value={props.disabled ? \"\" : props.value}\n            className={\"Dropdown-option\" + !props.disabled ? \"color-black\": \"\"}>\n            {props.value}\n        </option>\n    );\n};\n\nexport default DropDownItems;","import React from \"react\";\nimport {Field} from \"formik\";\nimport DropDownItems from \"./DropDownItem/DropDownItem\";\nimport './Form-DropDown.css';\nimport '../Form.css';\n\ninterface Props {\n    label: string,\n    id: string,\n    name: string,\n    initialValue: string,\n    dropDownList: string[],\n}\n\nconst FormDropDown: React.FC<Props> = (props: Props) => {\n    return (\n        <div>\n            <label\n                className=\"heading\"\n                htmlFor={props.id}>\n                {props.label}\n            </label>\n            <Field\n                component=\"select\"\n                name={props.name}\n                id={props.id}\n                className=\"Input-field Dropdown\">\n\n                <DropDownItems disabled={true} value={props.initialValue} />\n\n                {props.dropDownList.map((data) => {\n                    return (<DropDownItems disabled={false} value={data}/>);\n                })}\n\n            </Field>\n        </div>\n    );\n};\n\nexport default FormDropDown;","import React from \"react\";\nimport {ErrorMessage, Formik} from \"formik\";\nimport \"./Form.css\";\nimport * as Yup from 'yup';\nimport FormCheckbox from \"./Form-Checkbox/Form-Checkbox\";\nimport FormTextArea from \"./Form-TextArea/Form-TextArea\";\nimport FormRadio from \"./Form-Radio/Form-Radio\";\nimport FormText from \"./Form-Text/Form-Text\";\nimport FormNumber from \"./Form-Number/Form-Number\";\nimport FormDropDown from \"./Form-DropDown/Form-DropDown\";\n\ninterface Props {\n}\n\nconst Form: React.FC<Props> = (props: Props) => {\n    return (\n        <div className=\"Card\">\n            <Formik\n                initialValues={{\n                    name: \"\",\n                    email: \"\",\n                    age: \"\",\n                    role: \"\",\n                    recommend: \"definitely\",\n                    feature: \"\",\n                    improved: \"\",\n                    comments: \"\",\n                }}\n                validationSchema={\n                    Yup.object().shape({\n                        name: Yup.string().required('*Field is required'),\n                        email: Yup.string().email('Invalid Email').required('*Field is required'),\n                        age: Yup.number().required('*Field is required'),\n                        role: Yup.string().required('*Field is required'),\n                        recommend: Yup.string().required('*Field is required'),\n                        feature: Yup.string().required('*Field is required'),\n                        improved: Yup.string().required('*Field is required'),\n                        comments: Yup.string().required('*Field is required'),\n                    })\n                }\n                onSubmit={(values, actions) => {\n                    const data: any = {\n                        name: values.name,\n                        email: values.email,\n                        age: values.age,\n                        role: values.role,\n                        recommend: values.recommend,\n                        feature: values.feature,\n                        improved: values.improved,\n                        comments: values.comments\n                    };\n\n                    console.log(data);\n                }}>\n                {formikProps => {\n                    return (\n                        <form onSubmit={formikProps.handleSubmit} onReset={formikProps.handleReset}>\n                            <div className=\"Entry-field\">\n\n                                <FormText label=\"Name\" name=\"name\" placeholder=\"Enter your Name\" id=\"name\"/>\n                                <ErrorMessage\n                                    name=\"name\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n\n                                <FormText label=\"Email\" name=\"email\" placeholder=\"Enter your Email\" id=\"email\"/>\n\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n\n                                <FormNumber label=\"Age\" name=\"age\" placeholder=\"Enter your age\" id=\"age\"/>\n                                <ErrorMessage\n                                    name=\"age\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n                                <FormDropDown\n                                    label=\"Which option best describes your current role?\"\n                                    id=\"role\"\n                                    name=\"role\"\n                                    initialValue=\"Select current Role\"\n                                    dropDownList={\n                                        [\"Student\", \"Full Time Job\", \"Full Time Learner\", \"Prefer not to say\", \"other\",]\n                                    }\n                                />\n\n                                <ErrorMessage\n                                    name=\"role\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n                                <label className=\"heading\">Would you recommend freeCodeCamp to a friend?</label>\n\n                                <FormRadio name=\"recommend\" id=\"definitely\" value=\"Definitely\"/>\n                                <FormRadio name=\"recommend\" id=\"maybe\" value=\"Maybe\"/>\n                                <FormRadio name=\"recommend\" id=\"not-sure\" value=\"Not Sure\"/>\n\n                                <ErrorMessage\n                                    name=\"recommend\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n                                <FormDropDown\n                                    label=\"What is your favorite feature of freeCodeCamp?\"\n                                    id=\"feature\"\n                                    name=\"feature\"\n                                    initialValue=\"Select current Feature\"\n                                    dropDownList={\n                                        [\"Challenges\", \"Projects\", \"Community\", \"Open Source\",]\n                                    }\n                                />\n                                <ErrorMessage\n                                    name=\"feature\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n                                <label\n                                    className=\"heading\">\n                                    What would you like to see improved? (Check all that apply)\n                                </label>\n\n                                <FormCheckbox name=\"improved\" id=\"front-end\" value=\"Front-End Projects\"/>\n                                <FormCheckbox name=\"improved\" id=\"back-end\" value=\"Back-End Projects\"/>\n                                <FormCheckbox name=\"improved\" id=\"data\" value=\"Data Visualization\"/>\n                                <FormCheckbox name=\"improved\" id=\"challenges\" value=\"Challenges\"/>\n                                <FormCheckbox name=\"improved\" id=\"open\" value=\"Open Source Community\"/>\n                                <FormCheckbox name=\"improved\" id=\"gitter\" value=\"Gitter help rooms\"/>\n                                <FormCheckbox name=\"improved\" id=\"videos\" value=\"Videos\"/>\n                                <FormCheckbox name=\"improved\" id=\"city\" value=\"City Meetups\"/>\n                                <FormCheckbox name=\"improved\" id=\"wiki\" value=\"Wiki\"/>\n                                <FormCheckbox name=\"improved\" id=\"forum\" value=\"Forum\"/>\n                                <FormCheckbox name=\"improved\" id=\"additional\" value=\"Additional Courses\"/>\n\n                                <ErrorMessage\n                                    name=\"improved\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <div className=\"Entry-field\">\n                                <FormTextArea\n                                    label=\"Any comments or suggestions?\"\n                                    name=\"comments\"\n                                    id=\"comments\"\n                                    placeholder=\"Enter your comments here...\"\n                                />\n                                <ErrorMessage\n                                    name=\"comments\"\n                                    render={msg => <div className=\"Error-message\">{msg}</div>}\n                                />\n                            </div>\n\n                            <button type=\"submit\" disabled={formikProps.isSubmitting} className=\"btn-submit\">Submit\n                            </button>\n                        </form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from \"./components/Form/Form\";\n\nexport interface GlobalProps {\n}\n\nconst App: React.FC<GlobalProps> = (props: GlobalProps) => {\n    return (\n        <div className=\"App\">\n            <h1>\n                freeCodeCamp Survey Form\n            </h1>\n\n            <h3>Thank you for taking the time to help us improve the platform</h3>\n\n            <Form/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}